import { CellTemplates, Cell, ReactGridProps, Compatible, Highlight, CellChange } from './PublicModel';
import { DefaultBehavior } from '../Behaviors/DefaultBehavior';
import { CellMatrix } from './CellMatrix';
import { Behavior } from './Behavior';
import { Location } from './InternalModel';
import { Range } from './Range';
export declare type StateModifier<TState extends State = State> = (state: TState) => TState;
export declare type StateUpdater = (modifier: StateModifier) => void;
export interface State<TCellMatrix extends CellMatrix = CellMatrix, TBehavior extends Behavior = Behavior> {
    update: StateUpdater;
    readonly props?: ReactGridProps;
    readonly legacyBrowserMode: boolean;
    readonly cellMatrix: TCellMatrix;
    readonly currentBehavior: TBehavior;
    readonly focusedLocation?: Location;
    readonly cellTemplates?: CellTemplates;
    hiddenFocusElement?: HTMLDivElement;
    readonly reactGridElement?: HTMLDivElement;
    readonly scrollableElement?: HTMLElement | (Window & typeof globalThis);
    readonly queuedCellChanges: CellChange[];
    currentlyEditedCell?: Compatible<Cell>;
    readonly highlightLocations: Highlight[];
    readonly visibleRange?: Range;
    readonly leftStickyColumns?: number;
    readonly topStickyRows?: number;
    readonly topScrollBoudary: number;
    readonly bottomScrollBoudary: number;
    readonly leftScrollBoudary: number;
    readonly rightScrollBoudary: number;
    readonly enableGroupIdRender: boolean;
}
export declare const defaultStateFields: {
    legacyBrowserMode: boolean;
    focusedLocation: undefined;
    currentBehavior: DefaultBehavior;
    cellTemplates: undefined;
    hiddenFocusElement: undefined;
    reactGridElement: undefined;
    scrollableElement: undefined;
    queuedCellChanges: never[];
    currentlyEditedCell: undefined;
    highlightLocations: never[];
    visibleRange: undefined;
    topScrollBoudary: number;
    bottomScrollBoudary: number;
    leftScrollBoudary: number;
    rightScrollBoudary: number;
    enableGroupIdRender: boolean;
    leftStickyColumns: undefined;
    topStickyRows: undefined;
};
